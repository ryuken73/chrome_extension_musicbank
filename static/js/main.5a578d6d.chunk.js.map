{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","address","setAddress","minResult","setMinResult","minWord","setMinWord","console","log","useEffect","localStorage","getItem","handleChangeValue","type","event","value","target","className","Container","maxWidth","TextField","onChange","required","fullWidth","label","Button","variant","color","onClick","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAiDeA,MAzCf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAS,KAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGiBJ,mBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAIbC,QAAQC,IAAI,kBAEZC,qBAAU,WACRP,EAAWQ,aAAaC,QAAQ,YAChCP,EAAaM,aAAaC,QAAQ,cAClCL,EAAWI,aAAaC,QAAQ,cAEhC,IAEF,IAAMC,EAAoB,SAACC,GACzB,OAAO,SAACC,GAAW,IACVC,EAASD,EAAME,OAAfD,MACE,YAATF,GAAsBX,EAAWa,GACxB,cAATF,GAAwBT,EAAaW,GAC5B,YAATF,GAAsBP,EAAWS,KAWrC,OACE,yBAAKE,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAWL,MAAOd,EAASoB,SAAUT,EAAkB,WAAYU,UAAQ,EAACC,WAAS,EAACC,MAAM,iBAC5F,kBAACJ,EAAA,EAAD,CAAWL,MAAOZ,EAAWkB,SAAUT,EAAkB,aAAcW,WAAS,EAACC,MAAM,6BACvF,kBAACJ,EAAA,EAAD,CAAWL,MAAOV,EAASgB,SAAUT,EAAkB,WAAYW,WAAS,EAACC,MAAM,gDACnF,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAZ1B,WACtBlB,aAAamB,QAAQ,UAAW5B,GAChCS,aAAamB,QAAQ,YAAa1B,GAClCO,aAAamB,QAAQ,UAAWxB,KAS5B,mBC/BYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5a578d6d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nfunction App() {\n  const [address, setAddress] = useState('');\n  const [minResult, setMinResult] = useState(100);\n  const [minWord, setMinWord] = useState(2);\n  console.log('re-rendering!!')\n\n  useEffect(() => {\n    setAddress(localStorage.getItem('address'));\n    setMinResult(localStorage.getItem('minResult'));\n    setMinWord(localStorage.getItem('minWord'));\n\n  },[])\n\n  const handleChangeValue = (type) => {\n    return (event) => {\n      const {value} = event.target;\n      type === 'address' && setAddress(value);\n      type === 'minResult' && setMinResult(value);\n      type === 'minWord' && setMinWord(value);\n\n    }\n  }\n\n  const handleSaveClick = () => {\n    localStorage.setItem('address', address);\n    localStorage.setItem('minResult', minResult);\n    localStorage.setItem('minWord', minWord);\n  }\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <TextField value={address} onChange={handleChangeValue('address')} required fullWidth label=\"주소\"/>\n        <TextField value={minResult} onChange={handleChangeValue('minResult')} fullWidth label=\"결과갯수\"/>\n        <TextField value={minWord} onChange={handleChangeValue('minWord')} fullWidth label=\"최소검색 단어수\"/>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveClick}>저장</Button>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}