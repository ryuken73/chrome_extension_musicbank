{"version":3,"sources":["Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","title","backgroundColor","grey","color","display","alignItems","textBox","justifyContent","submitBtns","checkSupportThree","alignContent","Main","classes","defaults","address","maxResult","minWord","delay","timeout","supportThreeWords","useState","options","setOptions","message","setMessage","console","log","fakeStorage","Map","chrome","storage","local","useEffect","get","results","savedOptions","combinedOptions","Object","assign","set","runtime","lastError","handleChangeValue","type","event","value","target","newOptions","Container","maxWidth","Box","p","className","Typography","style","margin","variant","Button","marginLeft","onClick","TextField","autoFocus","onChange","required","fullWidth","label","Checkbox","checked","inputProps","setTimeout","window","close","App","theme","createMuiTheme","palette","overrides","MuiContainer","root","width","paddingLeft","paddingRight","MuiFormLabel","MuiInputBase","MuiButton","contained","MuiInput","underline","borderBottom","MuiCheckbox","colorPrimary","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.602f3544.chunk.js","sourcesContent":["/*global chrome*/\r\nimport React, {useState, useEffect} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nconst useStyle = makeStyles({\r\n    title : {\r\n        backgroundColor: grey[900],\r\n        color: \"white\",\r\n        display : 'flex',\r\n        alignItems : 'center'\r\n    },\r\n    textBox : {\r\n        backgroundColor: grey[800],\r\n        color: \"white\",\r\n        display : 'flex',\r\n        justifyContent : 'space-between'\r\n    },\r\n    submitBtns : {\r\n        backgroundColor: grey[700],\r\n        color: \"white\"\r\n    },\r\n    checkSupportThree : {\r\n      backgroundColor: grey[800],\r\n      display : 'flex',\r\n      alignContent : 'center'\r\n    }\r\n})\r\n\r\nfunction Main() {\r\n\r\n  const classes = useStyle();\r\n  const defaults = {\r\n    address : 'http://10.10.16.122:3000',\r\n    maxResult : 500,\r\n    minWord : 2,\r\n    delay : 100,\r\n    timeout : 5000,\r\n    supportThreeWords : true\r\n  }\r\n  const LOCAL_STORAGE_KEY = 'MBK_SEARCH_OPTIONS';\r\n  const [options, setOptions] = useState(defaults);\r\n  const [message, setMessage] = useState('');\r\n  console.log('re-rendering!!')\r\n  const {address, maxResult, minWord, delay, timeout, supportThreeWords} = options;\r\n  console.log(address,maxResult,minWord,delay, timeout, supportThreeWords);\r\n\r\n  const fakeStorage = new Map();\r\n\r\n  if(!chrome.storage){\r\n    chrome.storage = {\r\n      local : fakeStorage\r\n    }\r\n    // chrome.storage.local.set = ({key, value}) => fakeStorage[key] = value;\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('in useEffect');\r\n    chrome.storage.local.get(LOCAL_STORAGE_KEY, results => {\r\n      console.log('result = ', results);\r\n      console.log('result[LOCAL_STORAGE_KEY] = ', results[LOCAL_STORAGE_KEY]);\r\n      const savedOptions = results[LOCAL_STORAGE_KEY];\r\n      const combinedOptions = Object.assign({}, defaults, savedOptions);\r\n\r\n      setOptions({...combinedOptions});\r\n      chrome.storage.local.set({[LOCAL_STORAGE_KEY]: combinedOptions}, () => {\r\n        console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, combinedOptions);\r\n        console.log(chrome.runtime.lastError);\r\n      })\r\n    })\r\n  },[])\r\n\r\n  const handleChangeValue = (type) => {\r\n    return (event) => {\r\n      const {value} = event.target;\r\n      const newOptions = {...options, [type]: value};\r\n      setOptions(newOptions);     \r\n    }\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    // localStorage.setItem('address', address);\r\n    console.log(chrome);\r\n    chrome.storage.local.set({[LOCAL_STORAGE_KEY]: options}, () => {\r\n      console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, options);\r\n      console.log(chrome.runtime.lastError);\r\n      setMessage('저장되었습니다.');\r\n      setTimeout(() => window.close(), 1000);\r\n    });\r\n  }\r\n\r\n  const handleInitClick = () => {\r\n    setOptions({...defaults});\r\n    chrome.storage.local.set({[LOCAL_STORAGE_KEY]: {...defaults}}, () => {\r\n      console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, options);\r\n      console.log(chrome.runtime.lastError);\r\n      setMessage('초기화되었습니다.');\r\n    });\r\n  }\r\n\r\n  const handleCloseClick = () => {\r\n    window.close();\r\n  }\r\n\r\n  const handleChangeCheckSupport = (event) => {\r\n    console.log(event.target.checked);\r\n    const newOptions = {...options, 'supportThreeWords':!supportThreeWords};\r\n    setOptions(newOptions);\r\n  }\r\n\r\n  return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box p={1} className={classes.title} >\r\n            <Typography style={{margin:'5px'}} variant=\"h4\">\r\n                옵션\r\n            </Typography>\r\n            <Button style={{marginLeft:'auto'}} variant=\"contained\" onClick={handleInitClick}>초기화</Button>   \r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField  autoFocus={true} value={address} margin='dense' onChange={handleChangeValue('address')} required fullWidth label=\"주소\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField value={maxResult} margin='dense' onChange={handleChangeValue('maxResult')}  label=\"최대 결과갯수\"/>\r\n            <TextField value={minWord} margin='dense' onChange={handleChangeValue('minWord')}  label=\"검색요청 최소단어수\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField value={delay} margin='dense' onChange={handleChangeValue('delay')} label=\"자동완성 지연(ms)\"/>\r\n            <TextField value={timeout} margin='dense' onChange={handleChangeValue('timeout')} label=\"자동완성 시간초과(ms)\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.checkSupportThree}>\r\n          <Checkbox checked={supportThreeWords} \r\n              onChange={handleChangeCheckSupport}\r\n              color=\"primary\"\r\n              inputProps={{ 'aria-label': 'primary checkbox' }}\r\n          />\r\n          <Typography style={{margin: '0.8em', color: 'white'}} variant=\"body2\">세단어 이상 검색 활성화</Typography>\r\n        </Box>\r\n        <Box p={1} className={classes.submitBtns}>\r\n            <Button variant=\"contained\" onClick={handleSaveClick}>저장</Button>\r\n            <Button style={{marginLeft:'5px'}} variant=\"contained\" onClick={handleCloseClick}>닫기</Button>\r\n            <Typography style={{marginLeft: '20px'}} variant=\"caption\">{message}</Typography>         \r\n        </Box>\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport {ThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nimport Main from './Main';\nimport grey from '@material-ui/core/colors/grey';\n \n\nfunction App() {\n\n  const theme = createMuiTheme({\n      palette: {\n        type: 'light'\n      },\n      overrides: {\n        MuiContainer: {\n          root: {\n            width: '500px',\n            paddingLeft: '0px',\n            paddingRight: '0px',\n          }\n        },\n        MuiFormLabel: {\n          root: {\n            color: 'white',\n            '&$focused': {\n              color: 'grey',\n            },\n          },\n        },\n        MuiInputBase: {\n          root: {\n            color: 'white'\n          }\n        },\n        MuiButton: {\n          contained: {\n            backgroundColor:grey[800],\n            color:'white'\n          }\n        },\n        MuiInput: {\n          underline: {\n            '&:after' : {\n              borderBottom : '2px solid black'\n            }\n          }\n        },\n        MuiCheckbox: {\n          colorPrimary : {\n            color : 'white',\n            '&$checked' : {\n              color : 'white'\n            }\n          }\n        }\n      }\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Main></Main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}