{"version":3,"sources":["Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","title","backgroundColor","grey","color","display","alignItems","textBox","justifyContent","submitBtns","Main","classes","defaults","address","maxResult","minWord","delay","timeout","useState","options","setOptions","message","setMessage","console","log","fakeStorage","Map","chrome","storage","local","useEffect","get","results","savedOptions","combinedOptions","Object","assign","set","runtime","lastError","handleChangeValue","type","event","value","target","newOptions","Container","maxWidth","Box","p","className","Typography","style","margin","variant","Button","marginLeft","onClick","TextField","autoFocus","onChange","required","fullWidth","label","window","close","App","theme","createMuiTheme","palette","overrides","MuiContainer","root","width","paddingLeft","paddingRight","MuiFormLabel","MuiInputBase","MuiButton","contained","MuiInput","underline","borderBottom","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80f77a39.chunk.js","sourcesContent":["/*global chrome*/\r\nimport React, {useState, useEffect} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nconst useStyle = makeStyles({\r\n    title : {\r\n        backgroundColor: grey[900],\r\n        color: \"white\",\r\n        display : 'flex',\r\n        alignItems : 'center'\r\n    },\r\n    textBox : {\r\n        backgroundColor: grey[800],\r\n        color: \"white\",\r\n        display : 'flex',\r\n        justifyContent : 'space-between'\r\n    },\r\n    submitBtns : {\r\n        backgroundColor: grey[700],\r\n        color: \"white\"\r\n    }\r\n})\r\n\r\nfunction Main() {\r\n\r\n  const classes = useStyle();\r\n  const defaults = {\r\n    address : 'http://10.10.16.122:3000',\r\n    maxResult : 500,\r\n    minWord : 2,\r\n    delay : 500,\r\n    timeout : 5000,\r\n  }\r\n  const LOCAL_STORAGE_KEY = 'MBK_SEARCH_OPTIONS';\r\n  const [options, setOptions] = useState(defaults);\r\n  const [message, setMessage] = useState('');\r\n  console.log('re-rendering!!')\r\n  const {address, maxResult, minWord, delay, timeout} = options;\r\n  console.log(address,maxResult,minWord,delay, timeout);\r\n\r\n  const fakeStorage = new Map();\r\n\r\n  if(!chrome.storage){\r\n    chrome.storage = {\r\n      local : fakeStorage\r\n    }\r\n    // chrome.storage.local.set = ({key, value}) => fakeStorage[key] = value;\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('in useEffect');\r\n    chrome.storage.local.get(LOCAL_STORAGE_KEY, results => {\r\n      console.log('result = ', results);\r\n      console.log('result[LOCAL_STORAGE_KEY] = ', results[LOCAL_STORAGE_KEY]);\r\n      const savedOptions = results[LOCAL_STORAGE_KEY];\r\n      const combinedOptions = Object.assign({}, defaults, savedOptions);\r\n\r\n      setOptions({...combinedOptions});\r\n      chrome.storage.local.set({[LOCAL_STORAGE_KEY]: combinedOptions}, () => {\r\n        console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, combinedOptions);\r\n        console.log(chrome.runtime.lastError);\r\n      })\r\n    })\r\n  },[])\r\n\r\n  const handleChangeValue = (type) => {\r\n    return (event) => {\r\n      const {value} = event.target;\r\n      const newOptions = {...options, [type]: value};\r\n      setOptions(newOptions);     \r\n    }\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    // localStorage.setItem('address', address);\r\n    console.log(chrome);\r\n    chrome.storage.local.set({[LOCAL_STORAGE_KEY]: options}, () => {\r\n      console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, options);\r\n      console.log(chrome.runtime.lastError);\r\n      setMessage('저장되었습니다.');\r\n    });\r\n  }\r\n\r\n  const handleInitClick = () => {\r\n    setOptions({...defaults});\r\n    chrome.storage.local.set({[LOCAL_STORAGE_KEY]: {...defaults}}, () => {\r\n      console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, options);\r\n      console.log(chrome.runtime.lastError);\r\n      setMessage('초기화되었습니다.');\r\n    });\r\n  }\r\n\r\n  const handleCloseClick = () => {\r\n    window.close();\r\n  }\r\n\r\n\r\n  return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box p={1} className={classes.title} >\r\n            <Typography style={{margin:'5px'}} variant=\"h4\">\r\n                옵션\r\n            </Typography>\r\n            <Button style={{marginLeft:'auto'}} variant=\"contained\" onClick={handleInitClick}>초기화</Button>   \r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField  autoFocus={true} value={address} margin='dense' onChange={handleChangeValue('address')} required fullWidth label=\"주소\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField value={maxResult} margin='dense' onChange={handleChangeValue('maxResult')}  label=\"최대 결과갯수\"/>\r\n            <TextField value={minWord} margin='dense' onChange={handleChangeValue('minWord')}  label=\"검색요청 최소단어수\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField value={delay} margin='dense' onChange={handleChangeValue('delay')} label=\"자동완성 지연(ms)\"/>\r\n            <TextField value={timeout} margin='dense' onChange={handleChangeValue('timeout')} label=\"자동완성 시간초과(ms)\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.submitBtns}>\r\n            <Button variant=\"contained\" onClick={handleSaveClick}>저장</Button>\r\n            <Button style={{marginLeft:'5px'}} variant=\"contained\" onClick={handleCloseClick}>닫기</Button>\r\n            <Typography style={{marginLeft: '20px'}} variant=\"caption\">{message}</Typography>         \r\n        </Box>\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport {ThemeProvider, createMuiTheme} from '@material-ui/core/styles';\r\nimport Main from './Main';\r\nimport grey from '@material-ui/core/colors/grey';\r\n \r\n\r\nfunction App() {\r\n\r\n  const theme = createMuiTheme({\r\n      palette: {\r\n        type: 'light'\r\n      },\r\n      overrides: {\r\n        MuiContainer: {\r\n          root: {\r\n            width: '500px',\r\n            paddingLeft: '0px',\r\n            paddingRight: '0px',\r\n          }\r\n        },\r\n        MuiFormLabel: {\r\n          root: {\r\n            color: 'white',\r\n            '&$focused': {\r\n              color: 'grey',\r\n            },\r\n          },\r\n        },\r\n        MuiInputBase: {\r\n          root: {\r\n            color: 'white'\r\n          }\r\n        },\r\n        MuiButton: {\r\n          contained: {\r\n            backgroundColor:grey[800],\r\n            color:'white'\r\n          }\r\n        },\r\n        MuiInput: {\r\n          underline: {\r\n            '&:after' : {\r\n              borderBottom : '2px solid black'\r\n            }\r\n          }\r\n        }\r\n      }\r\n  })\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Main></Main>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;  \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}