{"version":3,"sources":["Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","title","backgroundColor","grey","color","textBox","submitBtns","Main","classes","defaults","address","maxResult","minWord","useState","options","setOptions","console","log","useEffect","chrome","storage","local","get","results","runtime","lastError","handleChangeValue","type","event","value","target","newOptions","Container","maxWidth","Box","p","className","Typography","variant","gutterBottom","TextField","autoFocus","margin","onChange","required","fullWidth","label","Button","onClick","set","style","marginLeft","App","theme","createMuiTheme","palette","overrides","MuiContainer","root","width","paddingLeft","paddingRight","MuiFormLabel","MuiInputBase","MuiButton","contained","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.924075d1.chunk.js","sourcesContent":["/*global chrome*/\r\nimport React, {useState, useEffect} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\nconst useStyle = makeStyles({\r\n    title : {\r\n        backgroundColor: grey[900],\r\n        color: \"white\"\r\n    },\r\n    textBox : {\r\n        backgroundColor: grey[800],\r\n        color: \"white\"\r\n    },\r\n    submitBtns : {\r\n        backgroundColor: grey[700],\r\n        color: \"white\"\r\n    }\r\n})\r\n\r\nfunction Main() {\r\n\r\n  const classes = useStyle();\r\n  const defaults = {\r\n    address : 'https://10.10.16.122:3000',\r\n    maxResult : 500,\r\n    minWord : 2\r\n  }\r\n  const LOCAL_STORAGE_KEY = 'MBK_SEARCH_OPTIONS';\r\n  const [options, setOptions] = useState(defaults);\r\n  console.log('re-rendering!!')\r\n  const {address, maxResult, minWord} = options;\r\n  console.log(address,maxResult,minWord);\r\n\r\n  useEffect(() => {\r\n    console.log('in useEffect');\r\n    chrome.storage.local.get(LOCAL_STORAGE_KEY, results => {\r\n      console.log('result = %j', results);\r\n      console.log('result[LOCAL_STORAGE_KEY] = %j', results[LOCAL_STORAGE_KEY]);\r\n      setOptions({...results[LOCAL_STORAGE_KEY]});\r\n      console.log(chrome.runtime.lastError);\r\n    });\r\n  },[])\r\n\r\n  const handleChangeValue = (type) => {\r\n    return (event) => {\r\n      const {value} = event.target;\r\n      const newOptions = {...options, [type]: value};\r\n      setOptions(newOptions);\r\n    }\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    // localStorage.setItem('address', address);\r\n    console.log(chrome);\r\n    chrome.storage.local.set({[LOCAL_STORAGE_KEY]: options}, () => {\r\n      console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, options);\r\n      console.log(chrome.runtime.lastError);\r\n    });\r\n  }\r\n\r\n  const handleInitClick = () => {\r\n    setOptions({...defaults});\r\n    chrome.storage.local.set({[LOCAL_STORAGE_KEY]: options}, () => {\r\n      console.log(`save localStorage[${LOCAL_STORAGE_KEY}] = `, options);\r\n      console.log(chrome.runtime.lastError);\r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box p={1}  className={classes.title} >\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Musicbank Options\r\n            </Typography>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField  autoFocus={true} value={address} margin='dense' onChange={handleChangeValue('address')} required fullWidth label=\"주소\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField value={maxResult} margin='dense' onChange={handleChangeValue('maxResult')} fullWidth label=\"최대 결과갯수\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.textBox}>\r\n            <TextField value={minWord} margin='dense' onChange={handleChangeValue('minWord')} fullWidth label=\"최소 검색단어수\"/>\r\n        </Box>\r\n        <Box p={1} className={classes.submitBtns}>\r\n            <Button variant=\"contained\" onClick={handleSaveClick}>저장</Button>\r\n            <Button style={{marginLeft:'5px'}} variant=\"contained\" onClick={handleInitClick}>초기화</Button>\r\n        </Box>\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport {ThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nimport Main from './Main';\nimport grey from '@material-ui/core/colors/grey';\n \n\nfunction App() {\n\n  const theme = createMuiTheme({\n      palette: {\n        type: 'light'\n      },\n      overrides: {\n        MuiContainer: {\n          root: {\n            width: '500px',\n            paddingLeft: '0px',\n            paddingRight: '0px',\n          }\n        },\n        MuiFormLabel: {\n          root: {\n            color: 'white'\n          }\n        },\n        MuiInputBase: {\n          root: {\n            color: 'white'\n          }\n        },\n        MuiButton: {\n          contained: {\n            backgroundColor:grey[800],\n            color:'white'\n          }\n        },\n      }\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Main></Main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}