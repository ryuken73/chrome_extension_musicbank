{"version":3,"sources":["Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","useState","address","setAddress","minResult","setMinResult","minWord","setMinWord","console","log","defaultValues","useEffect","localStorage","getItem","handleChangeValue","type","event","value","target","Container","maxWidth","Box","m","TextField","autoFocus","margin","onChange","required","fullWidth","label","width","Button","variant","color","onClick","setItem","style","marginLeft","App","theme","createMuiTheme","palette","overrides","MuiContainer","root","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAwEeA,MAhEf,WAAiB,IAAD,EACgBC,mBAAS,IADzB,mBACPC,EADO,KACEC,EADF,OAEoBF,mBAAS,KAF7B,mBAEPG,EAFO,KAEIC,EAFJ,OAGgBJ,mBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,KAIdC,QAAQC,IAAI,kBAEZ,IAAMC,EACQ,4BADRA,EAEU,IAFVA,EAGQ,EAGdC,qBAAU,WACRR,EAAWS,aAAaC,QAAQ,YAChCR,EAAaO,aAAaC,QAAQ,cAClCN,EAAWK,aAAaC,QAAQ,cAEhC,IAEF,IAAMC,EAAoB,SAACC,GACzB,OAAO,SAACC,GAAW,IACVC,EAASD,EAAME,OAAfD,MACE,YAATF,GAAsBZ,EAAWc,GACxB,cAATF,GAAwBV,EAAaY,GAC5B,YAATF,GAAsBR,EAAWU,KAqBrC,OACI,kBAACE,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACC,EAAA,EAAD,CAAWC,WAAW,EAAMP,MAAOf,EAASuB,OAAO,QAAQC,SAAUZ,EAAkB,WAAYa,UAAQ,EAACC,WAAS,EAACC,MAAM,kBAEhI,kBAACR,EAAA,EAAD,CAAKC,EAAG,EAAGQ,MAAO,KACd,kBAACP,EAAA,EAAD,CAAWN,MAAOb,EAAWqB,OAAO,QAAQC,SAAUZ,EAAkB,aAAcc,WAAS,EAACC,MAAM,8BAE1G,kBAACR,EAAA,EAAD,CAAKC,EAAG,EAAGQ,MAAO,KACd,kBAACP,EAAA,EAAD,CAAWN,MAAOX,EAASmB,OAAO,QAAQC,SAAUZ,EAAkB,WAAYc,WAAS,EAACC,MAAM,iDAEtG,kBAACR,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACS,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QA5B9B,WACtBtB,aAAauB,QAAQ,UAAWjC,GAChCU,aAAauB,QAAQ,YAAa/B,GAClCQ,aAAauB,QAAQ,UAAW7B,KAyBxB,gBACA,kBAACyB,EAAA,EAAD,CAAQK,MAAO,CAACC,WAAW,OAAQL,QAAQ,YAAYC,MAAM,UAAUC,QAvBzD,WACtBtB,aAAauB,QAAQ,UAAWzB,GAChCE,aAAauB,QAAQ,YAAazB,GAClCE,aAAauB,QAAQ,UAAWzB,GAChCP,EAAWO,GACXL,EAAaK,GACbH,EAAWG,KAiBH,yBCvCG4B,MAtBf,WAEE,IAAMC,EAAQC,YAAe,CACzBC,QAAU,CACR1B,KAAO,SAET2B,UAAY,CACVC,aAAe,CACbC,KAAO,CACLd,MAAQ,aAMlB,OACE,kBAACe,EAAA,EAAD,CAAeN,MAAOA,GACpB,kBAAC,EAAD,QCVcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6ae6397f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nfunction Main() {\r\n  const [address, setAddress] = useState('');\r\n  const [minResult, setMinResult] = useState(100);\r\n  const [minWord, setMinWord] = useState(2);\r\n  console.log('re-rendering!!')\r\n\r\n  const defaultValues = {\r\n      address : 'https://10.10.16.122:3000',\r\n      minResult : 500,\r\n      minWord : 2\r\n  }\r\n\r\n  useEffect(() => {\r\n    setAddress(localStorage.getItem('address'));\r\n    setMinResult(localStorage.getItem('minResult'));\r\n    setMinWord(localStorage.getItem('minWord'));\r\n\r\n  },[])\r\n\r\n  const handleChangeValue = (type) => {\r\n    return (event) => {\r\n      const {value} = event.target;\r\n      type === 'address' && setAddress(value);\r\n      type === 'minResult' && setMinResult(value);\r\n      type === 'minWord' && setMinWord(value);\r\n\r\n    }\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    localStorage.setItem('address', address);\r\n    localStorage.setItem('minResult', minResult);\r\n    localStorage.setItem('minWord', minWord);\r\n  }\r\n\r\n  const handleInitClick = () => {\r\n    localStorage.setItem('address', defaultValues.address);\r\n    localStorage.setItem('minResult', defaultValues.minResult);\r\n    localStorage.setItem('minWord', defaultValues.minWord);\r\n    setAddress(defaultValues.address);\r\n    setMinResult(defaultValues.minResult);\r\n    setMinWord(defaultValues.minWord);\r\n  }\r\n\r\n\r\n  return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box m={1}>\r\n            <TextField autoFocus={true} value={address} margin='dense' onChange={handleChangeValue('address')} required fullWidth label=\"주소\"/>\r\n        </Box>\r\n        <Box m={1} width={1/4}>\r\n            <TextField value={minResult} margin='dense' onChange={handleChangeValue('minResult')} fullWidth label=\"결과갯수\"/>\r\n        </Box>\r\n        <Box m={1} width={1/4}>\r\n            <TextField value={minWord} margin='dense' onChange={handleChangeValue('minWord')} fullWidth label=\"최소검색 단어수\"/>\r\n        </Box>\r\n        <Box m={1}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSaveClick}>저장</Button>\r\n            <Button style={{marginLeft:'5px'}} variant=\"contained\" color=\"primary\" onClick={handleInitClick}>초기화</Button>\r\n        </Box>\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport {ThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nimport Main from './Main';\n \n\nfunction App() {\n\n  const theme = createMuiTheme({\n      palette : {\n        type : 'light'\n      },\n      overrides : {\n        MuiContainer : {\n          root : {\n            width : '600px'\n          }\n        }\n      }\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Main></Main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}